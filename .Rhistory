data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
data <- data[,-c(2,3]
# Data Imputation
library(Hmisc)
data$Age <- with(data, impute(Age, mean))
# Split data into train and validation
library(caret)
a <- createDataPartition(data$Approved,
p = 0.8,
list=FALSE)
train <- data[a,]
validation <- data[-a,]
categorical_vars <- c("Gender",
"Contacted",
"Source",
"Source_Category",
"Var1",
"Approved",
"lead.creation.month")
for(col in categorical_vars) {
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
# Load library ROSE for imbalenced data
library(ROSE)
train.ROSE <- ROSE(Approved ~ .,
data = train[,-c(1,3)],
seed=100)$data
# load library randomforest
library(randomForest)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=2)
bestmtry <- tuneRF(train[,-c(1,3)], train$Approved,
ntreeTry =20, stepFactor = 1.1,
improve = 0.01, trace = T, plot = T)
print(bestmtry)
pred <- predict(model_rf, train)
# Model performance evaluation on train dataset
# Calculate root mean square error
RMSE.baseline <- sqrt(mean((as.integer(pred) - as.integer(train$Approved))^2))
print(paste("RMSE",RMSE.baseline))
# Calculate mean average error
MAE.baseline <- mean(abs(as.integer(pred) - as.integer(train$Approved)))
print(paste("MAE",
MAE.baseline))
accuracy.meas(train$Approved,
pred)
roc.curve(train$Approved,
pred,
plotit = F)
val.pred <- predict(model_rf, validation)
# Model performance evaluation on validation dataset
# Calculate root mean square error
RMSE.baseline.val <- sqrt(mean((as.integer(val.pred) - as.integer(validation$Approved))^2))
print(paste("RMSE",RMSE.baseline.val))
# Calculate mean average error
MAE.baseline.val <- mean(abs(as.integer(val.pred) - as.integer(validation$Approved)))
print(paste("MAE",MAE.baseline.val))
# Read test dataset
test <- read.csv('./data/test.csv',
header = T,
sep = ',',
na.strings = c("", " ", NA),
stringsAsFactors = T)
md.pattern(test)
test$Lead_Creation_Date <- as.Date(test$Lead_Creation_Date,
format='%d/%m/%y')
test$lead.creation.month <- month(test$Lead_Creation_Date)
test$lead.creation.month <- as.factor(test$lead.creation.month)
test$Var1 <- as.factor(test$Var1)
categorical_vars_test <- c("Gender",
"Contacted",
"Source",
"Source_Category",
"Var1",
"lead.creation.month")
for(col in categorical_vars_test) {
levels(test[,col]) <- levels(data[,col])
}
test$Approved <- predict(model_rf, test[,c("Gender",
"Contacted",
"Monthly_Income",
"Source",
"Source_Category",
"Var1",
"lead.creation.month")])
write.csv(test[,c("ID", "Approved")],
"./data/Submission 2.csv",
row.names = F)
table(test$Approved)
data <- raw.data[,-c(17:20)]
data <- na.omit(data)
data <-data[,2:18]
library(lubridate)
data$Lead_Creation_Date <- as.Date(data$Lead_Creation_Date,
format='%d/%m/%y')
data$lead.creation.month <- month(data$Lead_Creation_Date)
data$lead.creation.month <- as.factor(data$lead.creation.month)
data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
data <- data[,-c(2,3)]
library(caret)
a <- createDataPartition(data$Approved,
p = 0.8,
list=FALSE)
train <- data[a,]
validation <- data[-a,]
dim(data)
dim(train)
dim(test)
names(data)
str(data)
data$Employer_Category2 <- as.factor(data$Employer_Category2)
categorical_vars <- c("Gender",
"City_Code",
"City_Category",
"Employer_Code",
"Employer_Category1",
"Employer_Category2",
"Customer_Existing_Primary_Bank_Code",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"Approved",
"lead.creation.month")
for(col in categorical_vars) {
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
library(ROSE)
train.ROSE <- ROSE(Approved ~ .,
data = train,
seed=100)$data
library(randomForest)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=2)
unique(data)
colSums(unique(data))
collength(unique(data))
length(unique(data))
unique(data$Customer_Existing_Primary_Bank_Code)
names(data)
data <- data[,-9]
names(data)
data <- raw.data[,-c(17:20)]
data <- na.omit(data)
data <-data[,2:18]
library(lubridate)
data$Lead_Creation_Date <- as.Date(data$Lead_Creation_Date,
format='%d/%m/%y')
data$lead.creation.month <- month(data$Lead_Creation_Date)
data$lead.creation.month <- as.factor(data$lead.creation.month)
data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$Employer_Category2 <- as.factor(data$Employer_Category2)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
names(data)
unique(data$Customer_Existing_Primary_Bank_Code)
unique(data$Primary_Bank_Type)
data <- data[,-c(2,3,10)]
library(caret)
a <- createDataPartition(data$Approved,
p = 0.8,
list=FALSE)
train <- data[a,]
validation <- data[-a,]
categorical_vars <- c("Gender",
"City_Code",
"City_Category",
"Employer_Code",
"Employer_Category1",
"Employer_Category2",
#                      "Customer_Existing_Primary_Bank_Code",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"Approved",
"lead.creation.month")
for(col in categorical_vars) {
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
library(ROSE)
train.ROSE <- ROSE(Approved ~ .,
data = train,
seed=100)$data
library(randomForest)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=2)
unique(train$Approved)
for(col in categorical_vars) {
print(paste(col, levels(data[,col])))
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
table(data$City_Code)
table(data$City_Category)
table(data$Employer_Code)
table(data$Employer_Category1)
table(data$Employer_Category2)
names(data)
names(raw.data)
raw.data <- read.csv('./data/train.csv',
header = T,
sep = ',',
na.strings = c("", " ", NA),
stringsAsFactors = T)
data <- raw.data[,-c(17:20)]
data <- na.omit(data)
data <-data[,2:18]
library(lubridate)
data$Lead_Creation_Date <- as.Date(data$Lead_Creation_Date,
format='%d/%m/%y')
data$lead.creation.month <- month(data$Lead_Creation_Date)
data$lead.creation.month <- as.factor(data$lead.creation.month)
data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$Employer_Category2 <- as.factor(data$Employer_Category2)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
names(data)
data <- data[,-c(2,3,4,6,10)]
library(Hmisc)
library(caret)
a <- createDataPartition(data$Approved,
p = 0.8,
list=FALSE)
train <- data[a,]
validation <- data[-a,]
dim(data)
dim(train)
dim(test)
dim(validation)
categorical_vars <- c("Gender",
#                     "City_Code",
"City_Category",
#                      "Employer_Code",
"Employer_Category1",
"Employer_Category2",
#                      "Customer_Existing_Primary_Bank_Code",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"Approved",
"lead.creation.month")
for(col in categorical_vars) {
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
library(ROSE)
train.ROSE <- ROSE(Approved ~ .,
data = train,
seed=100)$data
library(randomForest)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=2)
bestmtry <- tuneRF(train, train$Approved,
ntreeTry =20, stepFactor = 1.1,
improve = 0.01, trace = T, plot = T)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=3)
print(bestmtry)
pred <- predict(model_rf, train)
RMSE.baseline <- sqrt(mean((as.integer(pred) - as.integer(train$Approved))^2))
print(paste("RMSE",RMSE.baseline))
MAE.baseline <- mean(abs(as.integer(pred) - as.integer(train$Approved)))
print(paste("MAE",
MAE.baseline))
accuracy.meas(train$Approved,
pred)
roc.curve(train$Approved,
pred,
plotit = F)
val.pred <- predict(model_rf, validation)
RMSE.baseline.val <- sqrt(mean((as.integer(val.pred) - as.integer(validation$Approved))^2))
print(paste("RMSE",RMSE.baseline.val))
MAE.baseline.val <- mean(abs(as.integer(val.pred) - as.integer(validation$Approved)))
print(paste("MAE",MAE.baseline.val))
test <- read.csv('./data/test.csv',
header = T,
sep = ',',
na.strings = c("", " ", NA),
stringsAsFactors = T)
md.pattern(test)
data <- raw.data[,-c(17:20)]
data <-data[,2:18]
library(lubridate)
data$Lead_Creation_Date <- as.Date(data$Lead_Creation_Date,
format='%d/%m/%y')
data$lead.creation.month <- month(data$Lead_Creation_Date)
data$lead.creation.month <- as.factor(data$lead.creation.month)
data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$Employer_Category2 <- as.factor(data$Employer_Category2)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
md.pattern(data)
library(Hmisc)
data$Age <- with(data, impute(Age, mean))
md.pattern(data)
data$Existing_EMI <- with(data, impute(Existing_EMI, mean))
md.pattern(data)
names(data)
data <- data[,-c(2,3,4,6,10)]
data <- na.omit(data)
dim(data)
library(caret)
a <- createDataPartition(data$Approved,
p = 0.8,
list=FALSE)
train <- data[a,]
validation <- data[-a,]
categorical_vars <- c("Gender",
#                     "City_Code",
"City_Category",
#                      "Employer_Code",
"Employer_Category1",
"Employer_Category2",
#                      "Customer_Existing_Primary_Bank_Code",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"Approved",
"lead.creation.month")
for(col in categorical_vars) {
levels(train[,col]) <- levels(data[,col])
levels(validation[,col]) <- levels(data[,col])
}
library(ROSE)
train.ROSE <- ROSE(Approved ~ .,
data = train,
seed=100)$data
library(randomForest)
model_rf <- randomForest(Approved ~ .,
data = train.ROSE,
ntree=20,
mtry=3)
bestmtry <- tuneRF(train, train$Approved,
ntreeTry =20, stepFactor = 1.1,
improve = 0.01, trace = T, plot = T)
print(bestmtry)
pred <- predict(model_rf, train)
RMSE.baseline <- sqrt(mean((as.integer(pred) - as.integer(train$Approved))^2))
print(paste("RMSE",RMSE.baseline))
MAE.baseline <- mean(abs(as.integer(pred) - as.integer(train$Approved)))
print(paste("MAE",
MAE.baseline))
accuracy.meas(train$Approved,
pred)
roc.curve(train$Approved,
pred,
plotit = F)
val.pred <- predict(model_rf, validation)
RMSE.baseline.val <- sqrt(mean((as.integer(val.pred) - as.integer(validation$Approved))^2))
print(paste("RMSE",RMSE.baseline.val))
MAE.baseline.val <- mean(abs(as.integer(val.pred) - as.integer(validation$Approved)))
print(paste("MAE",MAE.baseline.val))
test <- read.csv('./data/test.csv',
header = T,
sep = ',',
na.strings = c("", " ", NA),
stringsAsFactors = T)
test <- read.csv('./data/test.csv',
header = T,
sep = ',',
na.strings = c("", " ", NA),
stringsAsFactors = T)
md.pattern(test)
dim(test)
names(test)
data <- raw.data[,-c(17:20)]
names(data)
data <-data[,2:18]
library(lubridate)
data$Lead_Creation_Date <- as.Date(data$Lead_Creation_Date,
format='%d/%m/%y')
data$lead.creation.month <- month(data$Lead_Creation_Date)
data$lead.creation.month <- as.factor(data$lead.creation.month)
data$Var1 <- as.factor(data$Var1)
data$Approved <- as.factor(data$Approved)
data$Employer_Category2 <- as.factor(data$Employer_Category2)
data$DOB <- as.Date(data$DOB,
format='%d/%m/%y')
data$Age <- year(strptime(data$DOB,
format='%Y-%m-%d')) -
year(strptime(data$Lead_Creation_Date,
format='%Y-%m-%s'))
data <- data[,-c(2,3,4,6,10)]
data$Age <- with(data, impute(Age, mean))
data$Existing_EMI <- with(data, impute(Existing_EMI, mean))
md.pattern(data)
with(data, impute(City_Category, random))
with(data, impute(City_Category, 'random'))
data$City_Category <- with(data, impute(City_Category, 'random'))
is.na(data$City_Category)
sum(is.na(data$City_Category))
md.pattern(data)
data$Employer_Category1 <- with(data, impute(Employer_Category1, 'random'))
data$Employer_Category2 <- with(data, impute(Employer_Category2, 'random'))
data$Primary_Bank_Type <- with(data, impute(Primary_Bank_Type, 'random'))
md.pattern(data)
test$City_Category <- with(test, impute(City_Category, 'random'))
test$Employer_Category1 <- with(test, impute(Employer_Category1, 'random'))
test$Employer_Category2 <- with(test, impute(Employer_Category2, 'random'))
test$Primary_Bank_Type <- with(test, impute(Primary_Bank_Type, 'random'))
md.pattern(test)
test$Existing_EMI <- with(test, impute(Existing_EMI, mean))
md.pattern(test)
categorical_vars <- c("Gender",
"City_Category",
"Employer_Category1",
"Employer_Category2",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"lead.creation.month")
for(col in categorical_vars_test) {
levels(test[,col]) <- levels(data[,col])
}
test$Lead_Creation_Date <- as.Date(test$Lead_Creation_Date,
format='%d/%m/%y')
test$lead.creation.month <- month(test$Lead_Creation_Date)
test$lead.creation.month <- as.factor(test$lead.creation.month)
test$Var1 <- as.factor(test$Var1)
test$Approved <- as.factor(test$Approved)
test$Employer_Category2 <- as.factor(test$Employer_Category2)
test$DOB <- as.Date(test$DOB,
format='%d/%m/%y')
test$Age <- year(strptime(test$DOB,
format='%Y-%m-%d')) -
year(strptime(test$Lead_Creation_Date,
format='%Y-%m-%s'))
test$Lead_Creation_Date <- as.Date(test$Lead_Creation_Date,
format='%d/%m/%y')
test$lead.creation.month <- month(test$Lead_Creation_Date)
test$lead.creation.month <- as.factor(test$lead.creation.month)
test$Var1 <- as.factor(test$Var1)
test$Employer_Category2 <- as.factor(test$Employer_Category2)
test$DOB <- as.Date(test$DOB,
format='%d/%m/%y')
test$Age <- year(strptime(test$DOB,
format='%Y-%m-%d')) -
year(strptime(test$Lead_Creation_Date,
format='%Y-%m-%s'))
test$Age <- with(test, impute(Age, mean))
categorical_vars <- c("Gender",
"City_Category",
"Employer_Category1",
"Employer_Category2",
"Primary_Bank_Type",
"Contacted",
"Source",
"Source_Category",
"Var1",
"lead.creation.month")
for(col in categorical_vars_test) {
levels(test[,col]) <- levels(data[,col])
}
test$Approved <- predict(model_rf, test)
write.csv(test[,c("ID", "Approved")],
"./data/Submission 2.csv",
row.names = F)
table(test$Approved)
write.csv(test[,c("ID", "Approved")],
"./data/Submission 3.csv",
row.names = F)
